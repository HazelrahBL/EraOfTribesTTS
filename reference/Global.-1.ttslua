selected = ""
duration = ""
mapGuid = "223852"
barbarianBagGuid = "a4e39b"
nextStage = true

function onload(save_state)
   for _, obj in pairs(getAllObjects()) do
      if obj.getDescription() == "uninteractable" then
         obj.interactable = false
      end
   end
   Player.White.changeColor("Red")
end

function showGameSetup(obj, player_clicker_color, alt_click)
   show(Player[player_clicker_color], "menu")
end

function showPreview(obj, player_clicker_color, alt_click)
   show(Player[player_clicker_color], "PreView")
end

function changePage(player, value, id)
   show(player, value:sub(1, 2), id)
   show(player, value:sub(4, 5), id)
end

function show(player, value, id)
   if player == "" then
      self.UI.setAttribute(value, "visibility", "")
      self.UI.setAttribute(value, "active", "false")
      return
   end
   local opened = self.UI.getAttribute(value, "visibility")
   if opened == nil then opened = "" end
   if opened:find(player.color) then
      opened = opened:gsub("|" .. player.color, "")
      opened = opened:gsub(player.color .. "|", "")
      opened = opened:gsub(player.color, "")
      self.UI.setAttribute(value, "visibility", opened)
      if opened == "" then
         self.UI.setAttribute(value, "active", "false")
      end
   else
      if opened == "" then
         self.UI.setAttribute(value, "active", "true")
         self.UI.setAttribute(value, "visibility", player.color)
      else
         self.UI.setAttribute(value, "visibility", opened .. "|" .. player.color)
      end
   end
end

function checkMap(player, value, id)
   if selected ~= "" and selected ~= value then
      self.UI.setAttribute(selected, "outline", "#00000000")
   end
   self.UI.setAttribute(value, "outline", "#000000")
   selected = value
end

function checkDuration(player, value, id)
   duration = id
end

function checkPlayer(player, value, id)
   playerAreaCfg[id].playing = not playerAreaCfg[id].playing
end

function gameSetup(player, value, id)
   local players = {}
   local numbers = {}
   for k, v in pairs(playerAreaCfg) do
      if v.playing == true then
         table.insert(players, k)
      end
   end

   if #players < 1 then
      broadcastToAll("Select min. 1 Player first!", {1, 0, 0})
      return
   end
   if duration == "" then
      broadcastToAll("Select a Duration first!", {1, 0, 0})
      return
   end
   if selected == "" then
      broadcastToAll("Select a Map Setup first!", {1, 0, 0})
      return
   end

   if mapCfg[selected].url then
      getObjectFromGUID(mapGuid).setCustomObject({image = mapCfg[selected].url})
      getObjectFromGUID(mapGuid).reload()
   end

   for i = 1, #players do
      local ran = math.random(#players)
      table.insert(numbers, players[ran])
      table.remove(players, ran)
   end

   for k, v in pairs(numbers) do
      Wait.condition(function() setupPlayer(k - 1, v, (duration ~= "normal") and true or false, #numbers, mapCfg[selected].nations) end, function() return nextStage end)
   end
   Wait.condition(function() setupNonPlayerBarbarians(mapCfg[selected].nations) end, function() return nextStage end)
   Wait.condition(function() setupMap(selected) end, function() return nextStage end)

   show("", "menu")
   getObjectFromGUID(mapGuid).setDescription(selected)
end

function setupMap(selected)
   local bags = {
      boarders = getObjectFromGUID("acc51c"),
      horse = getObjectFromGUID("2fc48c"),
      ore = getObjectFromGUID("b6abb2"),
      gold = getObjectFromGUID("0655d1"),
      cloth = getObjectFromGUID("5acf4a"),
      wine = getObjectFromGUID("31353f"),
      beer = getObjectFromGUID("1efdad"),
      diamonds = getObjectFromGUID("b1e503"),
      ivory = getObjectFromGUID("4b543b"),
      fur = getObjectFromGUID("e6aa2f"),
      spices = getObjectFromGUID("6ef5fd"),
      food = getObjectFromGUID("4704ee"),
      barbarian = getObjectFromGUID(barbarianBagGuid)
   }
   if selected ~= "five" then
      for k, v in pairs(mapCfg[selected]) do
         if k ~= "nations" then
            bags.boarders.takeObject({position = v.pos, rotation = v.rot, smooth = false}).lock()
         end
      end
   end
   for k, v in pairs(tokenCfg) do
      for _, pos in pairs(v) do
         bags[k].shuffle()
         bags[k].takeObject({position = pos, rotation = (k == "food") and {0, 180, 0} or {0, 180, 180}, smooth = false})
      end
      if k ~= "food" and k ~= "barbarian" then
         bags[k].destruct()
      end
   end
   broadcastToAll("Choose one card to hold on, then a nation.", {0, 1, 0})
end

function setupPlayer(player, color, long, playerNumber, availableNations)
   nextStage = false
   local bag = getObjectFromGUID(playerAreaCfg[color].guid)
   local matPos = playerAreaCfg[color].pos
   local coin1 = getObjectFromGUID("52539a")
   local coin3 = getObjectFromGUID("ce49c7")
   local deck = getObjectFromGUID("3cfcd2")
   local influence = {start = {x = - 40.75, y = 2.35, z = 35.57}, step = -1.62}
   local order = {start = {x = - 24.78, y = 2.34, z = - 32.62}, step = 2.45}
   local leaderBA = {start = {x = -11.30, y = 3.09, z = 29.50}, step = 1}
   local leaderAT = {start = {x = 14.00, y = 3.05, z = 27.90}, step = 1}
   local rotations = {
      Vasalls = {0.00, 0.00, 0.00},
      Town = {0.00, 90.00, 0.00},
      Leader = {0.00, 180.00, 0.00},
      Marker = {0.00, 0.00, 0.00},
      Board = {0.00, 180.00, 0.00},
      Britons = {0.00, 180.00, 0.00},
      Chooser = {0.00, 180.00, 0.00},
      VictoryParade = {
         (long == true) and victoryParadeCfg[playerNumber].long[player + 1].rot[1] or victoryParadeCfg[playerNumber].short[player + 1].rot[1],
         (long == true) and victoryParadeCfg[playerNumber].long[player + 1].rot[2] or victoryParadeCfg[playerNumber].short[player + 1].rot[2],
         (long == true) and victoryParadeCfg[playerNumber].long[player + 1].rot[3] or victoryParadeCfg[playerNumber].short[player + 1].rot[3]
      }
   }
   local positions = {
      Vasalls = {{x = 7.69, y = 0.7, z = 7.3}, lock = true},
      Moral = {{46.27, 1.81 + 3, 22.07}},
      Era = {{ - 18.78, 1.81 + 3, 32.20}},
      Farming = {{ - 29.44, 1.81 + 3, 6.57}},
      Culture = {{ - 27.76, 1.81 + 3, - 11.03}},
      Navigation = {{ - 32.06, 1.81 + 3, - 15.62}},
      Commerce = {{ - 44.80, 1.81 + 3, - 13.99}},
      Mechanics = {{ - 44.67, 1.81 + 3, 6.69}},
      Architecture = {{ - 41.44, 1.81 + 3, 7.89}},
      Town = {
         {x = 12.75, y = 0.08, z = -7.45}, {x = 10.13, y = 0.08, z = -7.45}, {x = 7.49, y = 0.08, z = -7.45}, {x = 4.8, y = 0.08, z = -7.45},
         {x = 2.28, y = 0.08, z = -7.45}, {x = -0.37, y = 0.08, z = -7.45}, {x = -3.15, y = 0.08, z = -7.45}, {x = -5.79, y = 0.08, z = -7.45}
      },
      Leader = {
         {leaderAT.start.x, leaderAT.start.y, leaderAT.start.z + player * leaderAT.step},
         {leaderBA.start.x, leaderBA.start.y, leaderBA.start.z + player * leaderBA.step},
         {x = 11.25, y = 1.47, z = 16}, {x = 11.25, y = 1.47, z = 13}
      },
      Board = {{x = 0, y = 0, z = 16.5}, lock = true},
      Chooser = {{x = 0, y = 0, z = 0}, lock = true},
      Order = {{order.start.x + player * order.step, order.start.y, order.start.z}},
      Influence = {{influence.start.x + player * influence.step, influence.start.y, influence.start.z}},
      Coins = {
        {x = -4, y = 0.09, z = 19},
        {x = -4, y = 0.09, z = 16},
        {x = -4, y = 0.09, z = 13},
        {x = -1, y = 0.09, z = 16},
        {x = -1, y = 0.09, z = 13}
      },
      VictoryParade = {
         {
            (long == true) and victoryParadeCfg[playerNumber].long[player + 1].pos.x or victoryParadeCfg[playerNumber].short[player + 1].pos.x,
            (long == true) and victoryParadeCfg[playerNumber].long[player + 1].pos.y or victoryParadeCfg[playerNumber].short[player + 1].pos.y,
            (long == true) and victoryParadeCfg[playerNumber].long[player + 1].pos.z or victoryParadeCfg[playerNumber].short[player + 1].pos.z
         }
      }
   }

   for _, obj in pairs(bag.getObjects()) do
      if obj.name == "Chooser" then
         playerAreaCfg[color].Chooser = obj.guid
         local objPos = positions[obj.name][#positions[obj.name]]
         local pos = (objPos.x ~= nil) and {matPos.x + objPos.x, matPos.y + objPos.y, matPos.z + objPos.z} or objPos
         bag.takeObject({
            position = pos,
            rotation = rotations[obj.name],
            smooth = false,
            guid = obj.guid
         }).setLock((positions[obj.name].lock == true) and true or false)
      end
   end
   deck.shuffle()
   deck.deal((player == (playerNumber - 1)) and 4 or 2, color)

   Wait.frames(function()
      local chooser = getObjectFromGUID(playerAreaCfg[color].Chooser)
      local vasallFrame = 0
      Wait.condition(
         function()
            local nations = {"Britons", "Carthaginians", "Egyptians", "Gauls", "Germanics", "Greek", "Iberians", "Norsemen", "Romans", "Slavs"}
            for _, nation in pairs(nations) do
               if not availableNations[nation] then
                  chooser.UI.setAttribute(nation, "color", "#303030F0")
                  Global.UI.setAttribute(nation, "color", "#303030")
               end
            end

            Wait.condition(
               function()
                  for i, obj in pairs(bag.getObjects()) do
                     Wait.frames(
                        function()
                           if positions[obj.name] then
                              if not (obj.name == "Leader" and #positions[obj.name] == 1 and not long) then
                                 local objPos = positions[obj.name][#positions[obj.name]]
                                 local pos = (objPos.x ~= nil) and {matPos.x + objPos.x, matPos.y + objPos.y, matPos.z + objPos.z} or objPos
                                 bag.takeObject({
                                    position = pos,
                                    rotation = rotations[obj.name],
                                    smooth = false,
                                    guid = obj.guid
                                 }).setLock((positions[obj.name].lock == true) and true or false)
                                 table.remove(positions[obj.name])
                                 if obj.name == "Town" then
                                    table.insert(playerAreaCfg[color].Vasall.positions, {matPos.x + objPos.x + - 1.03, matPos.y + objPos.y + 0.52, matPos.z + objPos.z + 0.74})
                                    table.insert(playerAreaCfg[color].Vasall.positions, {matPos.x + objPos.x + - 1.03, matPos.y + objPos.y + 0.52, matPos.z + objPos.z + - 0.27})
                                    table.insert(playerAreaCfg[color].Vasall.positions, {matPos.x + objPos.x + - 1.03, matPos.y + objPos.y + 0.52, matPos.z + objPos.z + - 1.28})
                                 elseif obj.name == "Vasalls" then
                                    playerAreaCfg[color].Vasall.obj = obj.guid
                                    vasallFrame = i
                                 end
                              end
                           end
                        end,
                     i)
                  end

                  for _,v in pairs(positions.Coins) do
                    coin1.takeObject({position = {matPos.x + v.x, matPos.y + v.y, matPos.z + v.z}, rotation = {0, 180, 0}, smooth = false})
                  end

                  Wait.frames(function()
                     local vasalls = getObjectFromGUID(playerAreaCfg[color].Vasall.obj)
                     Wait.condition(
                        function()
                           local nationSelected = ""
                           Wait.condition(
                              function()
                                 nationSelected = getSelectedNation(matPos)
                                 for _, v in pairs(nationsCfg[nationSelected].homes) do
                                    vasalls.takeObject({position = v, smooth = false})
                                 end
                                 mapCfg[selected].nations[nationSelected] = false
                                 nextStage = true
                              end,
                              function()
                                 if getSelectedNation(matPos) ~= nil then return true else return false end
                              end
                           )
                           for _, v in pairs(playerAreaCfg[color].Vasall.positions) do
                              vasalls.takeObject({position = v, smooth = false})
                           end
                        end,
                        function()
                           vasalls = getObjectFromGUID(playerAreaCfg[color].Vasall.obj)
                           return checkLoaded(vasalls)
                        end
                     )
                  end, vasallFrame + 1)

               end,
               function()
                  if chooser == nil then return true else return false end
               end)
            end,
            function() return checkLoaded(chooser) end
         )
      end,
   1)
end

function setupNonPlayerBarbarians(availableNations)
   nextStage = false
   local bag = getObjectFromGUID(barbarianBagGuid)
   for nation, available in pairs(availableNations) do
      if available then
         for _, v in pairs(nationsCfg[nation].homes) do
            bag.shuffle()
            bag.takeObject({position = v, rotation = {0, 180, 180}, smooth = false})
         end
      end
   end
   bag.destruct()
   nextStage = true
end

function getSelectedNation(matPos)
   local hitlist = Physics.cast({
      origin = matPos,
      direction = {0, 1, 0},
      type = 3,
      size = {1, 1, 1},
      max_distance = 0,
      debug = false
   })

   for _, hit in pairs(hitlist) do
      if mapCfg[selected].nations[hit.hit_object.getName()] then
         return hit.hit_object.getName()
      end
   end
   return nil
end

function onObjectDrop(player_color, dropped_object)
   local token = {
      Farming = {"Add two new food tokens.", "Add two new food tokens.", "Add two new food tokens.\nYou are now allowed to have two vasalls in one area.", "Add three new food tokens."},
      Culture = {"Get one influence and two moral.", "Get two influence and +1 for Bread&Circuses.", "Get two influence and +2 (now 3) for Bread&Circuses.", "Get four influence."},
      Navigation = {
         "Movement with fleet is 2. Fleet costs 2 Thalers.\nYou get a free fleet. Place it immediately.", "Movement with fleet is 4. Fleet costs 3 Thalers.\nYou get a free fleet. Place it immediately.",
         "Movement with fleet is 6. Fleet costs 4 Thalers.\nYou get a free fleet. Place it immediately.", "Movement with fleet is 10. Fleet costs 6 Thalers.\nYou get a free fleet. Place it immediately."
      },
      Commerce = {"Get +1 for Trade.", "Get +2 (now 3) for Trade.", "Get +3 (now 6) for Trade.", "Get +5 (now 11) for Trade."},
      Mechanics = {
         "Movement with vasalls is 1. Army costs 1 Thaler.\nYou get a free Army. Place it in your regular Army area.", "Movement with vasalls is 1. Army costs 2 Thalers.\nYou get a free Army. Place it in your regular Army area.",
         "Movement with vasalls is 2. Army costs 3 Thalers.\nYou get a free Army. Place it in your regular Army area.", "Movement with vasalls is 3. Army costs 4 Thalers.\nYou get a free Army. Place it in your regular Army area."
      },
      Architecture = {"You are allowed to have 2 towns.", "You are allowed to have 4 towns.", "You are allowed to have 6 towns.", "You are allowed to have 8 towns."}
   }

   local extra = {
      Commerce = {
         "c156fc", "c60f98", "4cb3ec", "300ddd"
      },
      Culture = {
         false, "8220d8", "8cf20a", "8cf20a"
      },
      Farming = {
         "4704ee", "4704ee", "4704ee", "4704ee"
      }
   }

   local positions = {
      Commerce = {
         Yellow = { - 48.94, 1.58, - 54.14},
         Blue = { - 8.97, 1.58, - 54.14},
         Red = {31.02, 1.58, - 54.14},
         Green = {71.00, 1.58, - 54.14}
      },
      Culture = {
         Yellow = { - 53.75, 1.58, - 63.52},
         Blue = { - 13.73, 1.58, - 63.52},
         Red = {26.26, 1.58, - 63.52},
         Green = {66.24, 1.58, - 63.52}
      },
      Farming = {
         Yellow = { - 70.00, 5, - 53.52},
         Blue = { - 30.00, 5, - 53.52},
         Red = {10.00, 5, - 53.52},
         Green = {50.00, 5, - 53.52}
      }
   }

   if token[dropped_object.getName()] then
      broadcastToAll(token[dropped_object.getName()][getRing(dropped_object.getPosition())], player_color)
   end

   if extra[dropped_object.getName()] then
      if extra[dropped_object.getName()][getRing(dropped_object.getPosition())] then
         local hitlist = Physics.cast({
            origin = positions[dropped_object.getName()][dropped_object.getDescription()],
            direction = {0, 1, 0},
            type = 3,
            size = {1, 1, 1},
            max_distance = 0,
            debug = true
         })

         for _, hit in pairs(hitlist) do
            if hit.hit_object.getName() == "Bread" or hit.hit_object.getName() == "Trade" then
               hit.hit_object.destruct()
            end
         end
         if dropped_object.getName() == "Farming" then
            getObjectFromGUID(extra[dropped_object.getName()][getRing(dropped_object.getPosition())]).takeObject({
               position = positions[dropped_object.getName()][dropped_object.getDescription()], smooth = false
            })
            getObjectFromGUID(extra[dropped_object.getName()][getRing(dropped_object.getPosition())]).takeObject({
               position = positions[dropped_object.getName()][dropped_object.getDescription()], smooth = false
            })
         else
            getObjectFromGUID(extra[dropped_object.getName()][getRing(dropped_object.getPosition())]).takeObject({
               position = positions[dropped_object.getName()][dropped_object.getDescription()], smooth = false
            }).lock()
         end
      end
   end
end


function getDistance(pos)
   local center = {x = -36.95, y = 1.61, z = -3.65}
   return math.sqrt(math.abs(pos.x - center.x)^2 + math.abs(pos.z - center.z)^2)
end

function getRing(pos)
   local rings = {
      {min = 8.5, max = 12},
      {min = 6.3, max = 8.5},
      {min = 4, max = 6.3},
      {min = 0, max = 4}
   }
   local distance = getDistance(pos)
   for k, v in pairs(rings) do
      if distance < v.max and distance >= v.min then
         return k
      end
   end
end

function checkLoaded(obj)
   if obj ~= nil then
      if not obj.loading_custom and not obj.spawning then
         return true
      end
   end
   return false
end

--[[
  Data table containing starting locations of the tribes (nations) on the main
  game board
]]
nationsCfg = {
   Britons =      {homes = {{- 8.04, 2.09,   8.79}, {- 5.18, 2.09,   7.69}, {- 7.75, 2.09,   5.04}}},
   Carthaginians ={homes = {{  7.57, 2.09, -22.99}, { 10.78, 2.09, -28.01}, { 12.84, 2.09, -30.09}}},
   Egyptians =    {homes = {{ 35.56, 2.09, -31.97}, { 37.36, 2.09, -30.46}, { 40.05, 2.09, -29.36}}},
   Gauls =        {homes = {{- 3.22, 2.09, - 0.39}, {  2.11, 2.09,   1.01}, {  0.78, 2.09,   3.92}}},
   Germanics =    {homes = {{  7.78, 2.09,  10.27}, { 12.81, 2.09,   9.35}}},
   Greek =        {homes = {{ 26.34, 2.09, -15.49}, { 29.19, 2.09, -13.19}, { 31.50, 2.09, -11.00}}},
   Iberians =     {homes = {{- 9.98, 2.09, -20.40}, {- 5.56, 2.09, -19.00}, {- 4.00, 2.09, -15.26}}},
   Norsemen =     {homes = {{  7.64, 2.09,  22.32}, { 12.84, 2.09,  22.79}, { 13.22, 2.09,  18.91}}},
   Romans =       {homes = {{  9.96, 2.09, -11.35}, { 15.16, 2.09, -13.43}}},
   Slavs =        {homes = {{ 29.36, 2.09,  10.56}, { 33.45, 2.09,   8.44}, { 31.63, 2.09,   4.86}}}
}

--[[
  Data table containing information and location data of individual player's
  playing area and hand
]]
playerAreaCfg = {
   Yellow = {pos = {x = -60.00, y = 1.48, z = -60.00}, guid = "e5df01", Vasall = {positions = {}}, Chooser = "", playing = false},
   Blue =   {pos = {x = -20.00, y = 1.48, z = -60.00}, guid = "98f2d4", Vasall = {positions = {}}, Chooser = "", playing = false},
   Red =    {pos = {x =  20.00, y = 1.48, z = -60.00}, guid = "2df374", Vasall = {positions = {}}, Chooser = "", playing = false},
   Green =  {pos = {x =  60.00, y = 1.48, z = -60.00}, guid = "9103f6", Vasall = {positions = {}}, Chooser = "", playing = false}
}

--[[
  Data table containing initial location of the Victory Parade tokens per
  section 0.6.5 of the rulebook
]]
victoryParadeCfg = {
   {
      short = {
         {pos = {x = 3.07, y = 2.53, z = -35.61}, rot = {0.00, 180.00, 0.00}}
      },
      long = {
         {pos = {x = -3.13, y = 2.53, z = 35.42}, rot = {0.00, 0.00, 0.00}}
      }
   },
   {
      short = {
         {pos = {x = 21.71, y = 2.53, z = -35.62}, rot = {0.00, 180.00, 0.00}},
         {pos = {x = 24.71, y = 2.53, z = -35.62}, rot = {0.00, 180.00, 0.00}}
      },
      long = {
         {pos = {x = -35.08, y = 2.53, z = 35.62}, rot = {0.00, 0.00, 0.00}},
         {pos = {x = -38.08, y = 2.53, z = 35.62}, rot = {0.00, 0.00, 0.00}}
      }
   },
   {
      short = {
         {pos = {x = 41.63, y = 2.53, z = -35.11}, rot = {0.00, 180.00, 0.00}},
         {pos = {x = 43.30, y = 2.53, z = -36.02}, rot = {0.00, 180.00, 0.00}},
         {pos = {x = 45.03, y = 2.53, z = -35.11}, rot = {0.00, 180.00, 0.00}}
      },
      long = {
         {pos = {x = -50.32, y = 2.53, z = 22.53}, rot = {0.00, 270.00, 0.00}},
         {pos = {x = -51.23, y = 2.53, z = 20.86}, rot = {0.00, 270.00, 0.00}},
         {pos = {x = -50.33, y = 2.53, z = 19.14}, rot = {0.00, 270.00, 0.00}}
      }
   },
   {
      short = {
         {pos = {x = 50.30, y = 2.53, z = -29.85}, rot = {0.00, 90.00, 0.00}},
         {pos = {x = 51.21, y = 2.53, z = -28.73}, rot = {0.00, 90.00, 0.00}},
         {pos = {x = 50.30, y = 2.53, z = -26.99}, rot = {0.00, 90.00, 0.00}},
         {pos = {x = 51.21, y = 2.53, z = -25.79}, rot = {0.00, 90.00, 0.00}}
      },
      long = {
         {pos = {x = -50.29, y = 2.53, z = 1.98}, rot = {0.00, 270.00, 0.00}},
         {pos = {x = -51.20, y = 2.53, z = 0.87}, rot = {0.00, 270.00, 0.00}},
         {pos = {x = -50.29, y = 2.53, z = -0.88}, rot = {0.00, 270.00, 0.00}},
         {pos = {x = -51.20, y = 2.53, z = -2.07}, rot = {0.00, 270.00, 0.00}}
      }
   }
}

--[[
  Data table containing information on how to configure the map per section
  0.3 of the rulebook
]]
mapCfg = {
   two1 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276236656/33E104A77B34947B976A6E46BADE8DE0AE2152BD/",
      nations = {Carthaginians = true, Iberians = true, Romans = true},
      {pos = {-18.77, 1.88, - 4.25}, rot = {0, 180, 0}},
      {pos = {-13.96, 1.88, - 1.42}, rot = {0, 120, 0}},
      {pos = {- 8.89, 1.88,   1.40}, rot = {0, 180, 0}},
      {pos = {- 3.73, 1.88, - 1.57}, rot = {0, 240, 0}},
      {pos = {  0.85, 1.88, - 4.25}, rot = {0, 180, 0}},
      {pos = {  5.51, 1.88, - 1.49}, rot = {0, 120, 0}},
      {pos = { 10.67, 1.88,   1.37}, rot = {0, 180, 0}},
      {pos = { 15.71, 1.88, - 1.50}, rot = {0, 240, 0}},
      {pos = { 20.43, 1.88, - 4.25}, rot = {0, 180, 0}},
      {pos = { 25.52, 1.88, - 7.25}, rot = {0, 240, 0}},
      {pos = { 25.52, 1.88, -13.10}, rot = {0, 120, 0}},
      {pos = { 25.52, 1.88, -18.54}, rot = {0, 240, 0}},
      {pos = { 25.52, 1.88, -24.27}, rot = {0, 300, 0}},
      {pos = { 25.19, 1.88, -30.10}, rot = {0, 240, 0}}

   },
   two2 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276235706/B4A77F6728C34E042AA78C946796FDE4B6A55822/",
      nations = {Britons = true, Gauls = true, Iberians = true},
      {pos = {   5.98, 1.88,  26.50}, rot = {0,  60, 0}},
      {pos = {   6.08, 1.88,  20.72}, rot = {0, 120, 0}},
      {pos = {   5.98, 1.88,  15.36}, rot = {0,  60, 0}},
      {pos = {   6.08, 1.88,   9.41}, rot = {0, 120, 0}},
      {pos = {   5.98, 1.88,   4.08}, rot = {0,  60, 0}},
      {pos = {   6.08, 1.88, - 1.75}, rot = {0, 120, 0}},
      {pos = {   5.98, 1.88, - 7.34}, rot = {0,  60, 0}},
      {pos = {   6.08, 1.88, -13.05}, rot = {0, 120, 0}},
      {pos = {   5.98, 1.88, -18.50}, rot = {0,  60, 0}},
      {pos = {   6.08, 1.88, -24.40}, rot = {0, 120, 0}},
      {pos = {   5.98, 1.88, -29.70}, rot = {0,  60, 0}}
   },
   two3 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807909065896467/1C24B0F7E11D1DCC0F56F639D2C3F61182B6EEED/",
      nations = {Britons = true, Gauls = true, Norsemen = true, Germanics = true, Slavs = true},
      {pos = { -18.60, 1.88, - 4.85}, rot = {0,   0, 0}},
      {pos = { -13.50, 1.88, - 1.90}, rot = {0, 300, 0}},
      {pos = { - 8.78, 1.88,   0.80}, rot = {0,   0, 0}},
      {pos = { - 4.25, 1.88, - 1.90}, rot = {0,  60, 0}},
      {pos = {   0.88, 1.88, - 4.43}, rot = {0,   0, 0}},
      {pos = {   6.00, 1.88, - 1.90}, rot = {0, 300, 0}},
      {pos = {  10.51, 1.88,   0.80}, rot = {0,   0, 0}},
      {pos = {  15.25, 1.88, - 1.90}, rot = {0,  60, 0}},
      {pos = {  20.35, 1.88, - 4.85}, rot = {0,   0, 0}},
      {pos = {  25.50, 1.88, - 1.90}, rot = {0, 300, 0}},
      {pos = {  29.95, 1.88,   0.80}, rot = {0,   0, 0}}
   },
   two4 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276237838/4B31E56E6A14D06006972731B158BB84999395C6/",
      nations = {Romans = true, Carthaginians = true, Egyptians = true, Greek = true},
      {pos = { - 4.36, 1.88, -24.38}, rot = {0,  60, 0}},
      {pos = { - 4.31, 1.88, -18.46}, rot = {0, 120, 0}},
      {pos = {   0.75, 1.88, -15.52}, rot = {0,   0, 0}},
      {pos = {   5.48, 1.88, -12.75}, rot = {0, 300, 0}},
      {pos = {   5.40, 1.88, - 7.46}, rot = {0,  60, 0}},
      {pos = {   5.48, 1.88, - 1.55}, rot = {0, 120, 0}},
      {pos = {  10.65, 1.88,   1.36}, rot = {0,   0, 0}},
      {pos = {  15.64, 1.88, - 1.55}, rot = {0,  60, 0}},
      {pos = {  20.41, 1.88, - 4.41}, rot = {0,   0, 0}},
      {pos = {  25.00, 1.88, - 1.55}, rot = {0, 300, 0}},
      {pos = {  29.95, 1.88,   1.40}, rot = {0,   0, 0}}
   },
   two5 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276238957/3D36DA677568EBAC02635212F30F2402434E662D/",
      nations = {Slavs = true, Egyptians = true, Greek = true},
      {pos = {  15.30, 1.88,  26.75}, rot = {0, 300, 0}},
      {pos = {  15.30, 1.88,  20.70}, rot = {0,  60, 0}},
      {pos = {  15.63, 1.88,  15.38}, rot = {0, 300, 0}},
      {pos = {  15.30, 1.88,   9.30}, rot = {0,  60, 0}},
      {pos = {  15.30, 1.88,   4.15}, rot = {0, 300, 0}},
      {pos = {  15.30, 1.88, - 1.95}, rot = {0,  60, 0}},
      {pos = {  15.30, 1.88, - 7.20}, rot = {0, 300, 0}},
      {pos = {  15.30, 1.88, -13.25}, rot = {0,  60, 0}},
      {pos = {  15.30, 1.88, -18.40}, rot = {0, 300, 0}},
      {pos = {  15.30, 1.88, -24.50}, rot = {0,  60, 0}},
      {pos = {  20.35, 1.88, -27.40}, rot = {0,   0, 0}},
      {pos = {  25.00, 1.88, -30.15}, rot = {0,  60, 0}}
   },
   two6 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276240885/B88B81A4F83BC1036DC632F50B3225145DC4F041/",
      nations = {Britons = true, Gauls = true, Norsemen = true, Germanics = true},
      {pos = { -18.64, 1.88, - 4.83}, rot = {0,   0, 0}},
      {pos = { -14.02, 1.88, - 7.51}, rot = {0,  60, 0}},
      {pos = { - 8.90, 1.88, -10.45}, rot = {0,   0, 0}},
      {pos = { - 4.12, 1.88, -12.89}, rot = {0,  60, 0}},
      {pos = {   0.80, 1.88, -16.10}, rot = {0,   0, 0}},
      {pos = {   5.98, 1.88, -13.13}, rot = {0, 300, 0}},
      {pos = {  10.49, 1.88, -10.03}, rot = {0,   0, 0}},
      {pos = {  15.80, 1.88, - 7.40}, rot = {0, 300, 0}},
      {pos = {  20.33, 1.88, - 4.85}, rot = {0,   0, 0}},
      {pos = {  25.50, 1.88, - 1.90}, rot = {0, 300, 0}},
      {pos = {  25.50, 1.88,   4.10}, rot = {0,  60, 0}},
      {pos = {  25.50, 1.88,   9.40}, rot = {0, 300, 0}},
      {pos = {  25.50, 1.88,  15.35}, rot = {0,  60, 0}},
      {pos = {  25.50, 1.88,  20.70}, rot = {0, 300, 0}},
      {pos = {  25.50, 1.88,  26.60}, rot = {0,  60, 0}}
   },
   three1 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276233569/3CC3673DF4494D07E95A419F65C72E767B40CDBA/",
      nations = {Norsemen = true, Germanics = true, Britons = true, Gauls = true, Iberians = true, Carthaginians = true},
      {pos = {  15.72, 1.88,  26.30}, rot = {0, 300, 0}},
      {pos = {  15.72, 1.88,  21.01}, rot = {0,  60, 0}},
      {pos = {  15.72, 1.88,  15.00}, rot = {0, 300, 0}},
      {pos = {  15.72, 1.88,   9.75}, rot = {0,  60, 0}},
      {pos = {  15.72, 1.88,   3.75}, rot = {0, 300, 0}},
      {pos = {  15.72, 1.88, - 1.50}, rot = {0,  60, 0}},
      {pos = {  15.72, 1.88, - 7.60}, rot = {0, 300, 0}},
      {pos = {  15.72, 1.88, -12.75}, rot = {0,  60, 0}},
      {pos = {  15.72, 1.88, -18.90}, rot = {0, 120, 0}},
      {pos = {  15.72, 1.88, -24.00}, rot = {0,  60, 0}},
      {pos = {  15.72, 1.88, -30.20}, rot = {0, 300, 0}}
   },
   three2 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276234028/8DF8D8954C8B57456FBB9EEF10D06FF8959C13D2/",
      nations = {Romans = true, Carthaginians = true, Egyptians = true, Greek = true, Gauls = true, Iberians = true},
      {pos = { -23.80, 1.88,   4.10}, rot = {0, 300, 0}},
      {pos = { -18.59, 1.88,   7.05}, rot = {0,   0, 0}},
      {pos = { -13.50, 1.88,   4.10}, rot = {0,  60, 0}},
      {pos = { - 8.78, 1.88,   1.40}, rot = {0,   0, 0}},
      {pos = { - 4.03, 1.88,   4.10}, rot = {0, 300, 0}},
      {pos = {   0.88, 1.88,   7.05}, rot = {0,   0, 0}},
      {pos = {   5.90, 1.88,   4.10}, rot = {0,  60, 0}},
      {pos = {  10.51, 1.88,   1.40}, rot = {0,   0, 0}},
      {pos = {  15.30, 1.88,   4.10}, rot = {0, 300, 0}},
      {pos = {  20.35, 1.88,   7.05}, rot = {0,   0, 0}},
      {pos = {  25.47, 1.88,   4.10}, rot = {0,  60, 0}},
      {pos = {  29.95, 1.88,   1.40}, rot = {0,   0, 0}}
   },
   three3 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276235149/BE780901C4A12C3762F480A027144A52F0A001BC/",
      nations = {Britons = true, Gauls = true, Norsemen = true, Germanics = true, Slavs = true},
      {pos = { -18.73, 1.88, - 4.90}, rot = {0,   0, 0}},
      {pos = { -14.05, 1.88, - 7.55}, rot = {0,  60, 0}},
      {pos = { - 8.95, 1.88, -10.55}, rot = {0,   0, 0}},
      {pos = { - 3.75, 1.88, - 7.55}, rot = {0, 300, 0}},
      {pos = {   0.75, 1.88, - 4.51}, rot = {0,   0, 0}},
      {pos = {   5.45, 1.88, - 7.55}, rot = {0,  60, 0}},
      {pos = {  10.47, 1.88, -10.05}, rot = {0,   0, 0}},
      {pos = {  15.75, 1.88, - 7.55}, rot = {0, 300, 0}},
      {pos = {  20.45, 1.88, - 4.90}, rot = {0,   0, 0}},
      {pos = {  25.00, 1.88, - 7.55}, rot = {0,  60, 0}},
      {pos = {  30.15, 1.88, -10.40}, rot = {0,   0, 0}},
      {pos = {  35.30, 1.88, - 7.55}, rot = {0, 300, 0}},
      {pos = {  35.30, 1.88, - 1.65}, rot = {0,  60, 0}}
   },
   three4 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276234612/532DB5E06EA8C990FB89A31BC08EF72C21CE0C6B/",
      nations = {Slavs = true, Egyptians = true, Greek = true, Carthaginians = true, Norsemen = true, Germanics = true, Romans = true},
      {pos = { - 4.25, 1.88,  20.65}, rot = {0,  60, 0}},
      {pos = {   0.85, 1.88,  17.65}, rot = {0,   0, 0}},
      {pos = {   5.50, 1.88,  15.00}, rot = {0,  60, 0}},
      {pos = {   5.50, 1.88,   9.79}, rot = {0, 300, 0}},
      {pos = {   5.50, 1.88,   3.70}, rot = {0,  60, 0}},
      {pos = {   5.50, 1.88, - 1.55}, rot = {0, 300, 0}},
      {pos = {   5.50, 1.88, - 7.55}, rot = {0,  60, 0}},
      {pos = {   5.50, 1.88, -12.80}, rot = {0, 300, 0}},
      {pos = {   0.71, 1.88, -15.50}, rot = {0, 180, 0}},
      {pos = { - 4.25, 1.88, -18.45}, rot = {0, 120, 0}},
      {pos = { - 4.25, 1.88, -24.50}, rot = {0,  60, 0}},
      {pos = { - 4.25, 1.88, -29.65}, rot = {0, 300, 0}}
   },
   four1 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276232002/76FA69364DE36EA72495589101B270026D8023D4/",
      nations = {Carthaginians = true, Egyptians = true, Gauls = true, Germanics = true, Greek = true, Iberians = true, Romans = true, Slavs = true},
      {pos = { -23.75, 1.88,   4.15}, rot = {0, 300, 0}},
      {pos = { -18.65, 1.88,   7.00}, rot = {0,   0, 0}},
      {pos = { -13.60, 1.88,   4.15}, rot = {0,  60, 0}},
      {pos = { - 8.85, 1.88,   1.40}, rot = {0,   0, 0}},
      {pos = { - 4.25, 1.88,   4.15}, rot = {0, 300, 0}},
      {pos = { - 4.25, 1.88,   9.35}, rot = {0,  60, 0}},
      {pos = { - 4.25, 1.88,  15.35}, rot = {0, 300, 0}},
      {pos = {   0.85, 1.88,  18.25}, rot = {0,   0, 0}},
      {pos = {   5.95, 1.88,  15.35}, rot = {0,  60, 0}},
      {pos = {  10.65, 1.88,  12.60}, rot = {0,   0, 0}},
      {pos = {  15.53, 1.88,  15.30}, rot = {0, 300, 0}},
      {pos = {  20.38, 1.88,  18.25}, rot = {0,   0, 0}},
      {pos = {  25.10, 1.88,  21.20}, rot = {0, 300, 0}}
   },
   four2 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276231397/61E3C0BD4BEACE1F927331106997974815D31AB7/",
      nations = {Britons = true, Carthaginians = true, Gauls = true, Germanics = true, Iberians = true, Norsemen = true, Romans = true},
      {pos = {  25.20, 1.88, -30.05}, rot = {0,  60, 0}},
      {pos = {  25.55, 1.88, -24.45}, rot = {0, 300, 0}},
      {pos = {  25.55, 1.88, -18.45}, rot = {0,  60, 0}},
      {pos = {  25.55, 1.88, -13.15}, rot = {0, 300, 0}},
      {pos = {  25.55, 1.88, - 7.35}, rot = {0,  60, 0}},
      {pos = {  25.55, 1.88, - 1.85}, rot = {0, 300, 0}},
      {pos = {  25.55, 1.88,   3.92}, rot = {0,  60, 0}},
      {pos = {  25.55, 1.88,   9.35}, rot = {0, 300, 0}},
      {pos = {  25.55, 1.88,  15.25}, rot = {0,  60, 0}},
      {pos = {  25.55, 1.88,  20.65}, rot = {0, 300, 0}},
      {pos = {  25.55, 1.88,  26.60}, rot = {0,  60, 0}}
   },
   four3 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1005933395527573250/A1C6D5D5B352ABBB79B7C79BBDABB12E35EC4754",
      nations = {Carthaginians = true, Egyptians = true, Gauls = true, Germanics = true, Greek = true, Norsemen = true, Romans = true, Slavs = true},
      {pos = { - 4.30, 1.88,  20.70}, rot = {0,  60, 0}},
      {pos = { - 4.30, 1.88,  15.35}, rot = {0, 120, 0}},
      {pos = { - 4.30, 1.88,   9.30}, rot = {0,  60, 0}},
      {pos = { - 4.30, 1.88,   4.05}, rot = {0, 300, 0}},
      {pos = { - 8.80, 1.88,   1.40}, rot = {0,   0, 0}},
      {pos = { -14.00, 1.88, - 1.50}, rot = {0, 300, 0}},
      {pos = { -14.00, 1.88, - 7.55}, rot = {0,  60, 0}},
      {pos = { - 8.80, 1.88, -10.50}, rot = {0,   0, 0}},
      {pos = { - 4.15, 1.88, -12.90}, rot = {0,  60, 0}},
      {pos = { - 4.30, 1.88, -18.55}, rot = {0, 300, 0}},
      {pos = { - 4.30, 1.88, -24.35}, rot = {0,  60, 0}},
      {pos = { - 4.30, 1.88, -29.75}, rot = {0, 300, 0}}
   },
   four4 = {
      url = "http://cloud-3.steamusercontent.com/ugc/1004807852276233028/E93961DA05BE8401D1144AD6FDB060EB222FC35C/",
      nations = {Britons = true, Gauls = true, Germanics = true, Greek = true, Norsemen = true, Romans = true, Slavs = true},
      {pos = { -18.65, 1.88, - 4.85}, rot = {0,   0, 0}},
      {pos = { -14.10, 1.88, - 7.45}, rot = {0,  60, 0}},
      {pos = { - 8.95, 1.88, -10.50}, rot = {0,   0, 0}},
      {pos = { - 4.10, 1.88, -12.93}, rot = {0,  60, 0}},
      {pos = {   0.85, 1.88, -16.15}, rot = {0,   0, 0}},
      {pos = {   5.45, 1.88, -18.75}, rot = {0,  60, 0}},
      {pos = {  10.60, 1.88, -21.75}, rot = {0,   0, 0}},
      {pos = {  15.25, 1.88, -24.45}, rot = {0,  60, 0}},
      {pos = {  20.30, 1.88, -27.40}, rot = {0,   0, 0}},
      {pos = {  24.90, 1.88, -30.00}, rot = {0,  60, 0}},
      {pos = {  34.85, 1.88, -29.50}, rot = {0, 300, 0}},
      {pos = {  35.25, 1.88, -24.22}, rot = {0,  60, 0}},
      {pos = {  35.25, 1.88, -18.75}, rot = {0, 300, 0}},
      {pos = {  35.25, 1.88, -12.80}, rot = {0,  60, 0}},
      {pos = {  35.25, 1.88, - 7.55}, rot = {0, 300, 0}},
      {pos = {  35.25, 1.88, - 1.55}, rot = {0,  60, 0}},
      {pos = {  35.25, 1.88,   3.75}, rot = {0, 300, 0}}
   },
   five = {
      nations = {Britons = true, Carthaginians = true, Egyptians = true, Gauls = true, Germanics = true, Greek = true, Iberians = true, Norsemen = true, Romans = true, Slavs = true}
   }
}

--[[
  Data table with the initial locations of all tokens that are placed on the map
 at the begining of the game per section 0.4 of the rulebook
]]
tokenCfg = {
   food = {
      { -35.00, 2.50, -27.40},
      { -19.93, 2.50, -21.43},
      { -13.40, 2.50, -20.48},
      { - 8.48, 2.50, -24.96},
      { -10.12, 2.50, -17.37},
      { - 5.11, 2.50, -13.93},
      { - 9.29, 2.50, - 6.25},
      { - 7.54, 2.50, - 1.86},
      { - 4.93, 2.50, - 5.47},
      {   1.85, 2.50, - 9.24},
      {   2.80, 2.50, -12.29},
      {   3.13, 2.50, -20.09},
      {   1.38, 2.50, -22.81},
      {   9.27, 2.50, -23.65},
      {  11.99, 2.50, -25.39},
      {  13.00, 2.50, - 6.87},
      {  12.83, 2.50, -11.44},
      {  20.56, 2.50, - 7.40},
      {  19.51, 2.50, -12.48},
      {  21.21, 2.50, -16.62},
      {  25.83, 2.50, -28.48},
      {  28.92, 2.50, -26.12},
      {  36.11, 2.50, -33.62},
      {  37.09, 2.50, -28.39},
      {  42.50, 2.50, -26.30},
      {  44.08, 2.50, -21.60},
      {  32.23, 2.50, -17.42},
      {  29.18, 2.50, -11.75},
      {  37.89, 2.50, -10.42},
      {  31.71, 2.50, - 8.14},
      {  34.81, 2.50, - 4.20},
      {  47.91, 2.50, - 5.56},
      {  28.51, 2.50,  13.97},
      {  22.58, 2.50,  23.08},
      {  22.77, 2.50,   4.71},
      {  18.71, 2.50,  10.40},
      {  11.14, 2.50,  21.12},
      {  11.87, 2.50,  16.29},
      {  13.93, 2.50,  15.18},
      {   9.63, 2.50,  13.93},
      {   9.44, 2.50,   9.00},
      {   9.45, 2.50,   2.73},
      {   3.01, 2.50,   4.66},
      {   0.73, 2.50,  11.13},
      {   1.31, 2.50,  22.93},
      { - 6.54, 2.50,   2.85},
      { - 4.84, 2.50,   6.42},
      { -10.86, 2.50,  10.42},
      { - 9.85, 2.50,  14.04},
      { -30.20, 2.50,  28.67},
      { -20.60, 2.50,  12.68}
   },
   beer = {
      {  24.65, 2.50,   2.23},
      {  14.34, 2.50,   6.35},
      {  15.11, 2.50,  18.40},
      { -17.18, 2.50,  14.78}
   },
   ivory = {
      {   3.50, 2.50, -25.02},
      {   9.39, 2.50, -30.38},
      {  38.23, 2.50, -33.22},
      { -38.87, 2.50,  27.07},
   },
   spices = {
      {  48.65, 2.50, -20.68},
      { -13.58, 2.50, -16.47},
      {  21.86, 2.50, -11.31}
   },
   diamonds = {
      { -40.11, 2.50, -28.58},
      {   7.18, 2.50, -25.63},
      {  32.88, 2.50, -19.67}
   },
   wine = {
      {   6.26, 2.50,   6.28},
      { - 2.53, 2.50,   1.26},
      { - 6.43, 2.50, -17.43},
      {   1.35, 2.50, - 5.82},
      {   8.09, 2.50, - 7.64},
      {  39.58, 2.50, - 6.59},
      {  43.79, 2.50, -23.98}
   },
   fur = {
      {  25.96, 2.50,   6.34},
      {  29.79, 2.50,  21.64},
      {  18.52, 2.50, - 3.00},
      {  17.00, 2.50,  25.68},
      { - 8.51, 2.50,  17.73}
   },
   gold = {
      { -39.87, 2.50, -32.51},
      {  -6.47, 2.50, -27.34},
      {  28.39, 2.50, -20.22},
      {  27.87, 2.50, - 3.93},
      { - 8.05, 2.50, -12.07},
      {   4.95, 2.50,  23.66}
   },
   cloth = {
      {  48.54, 2.50, -24.68},
      { - 9.46, 2.50,   4.58},
      {  18.48, 2.50, -14.38}
   },
   horse = {
      {  42.66, 2.50, -32.66},
      {  31.10, 2.50,  15.14},
      {  18.68, 2.50,   7.84},
      { -10.37, 2.50, -14.64}
   },
   ore = {
      {  41.85, 2.50, -20.08},
      {  10.83, 2.50,  6.42},
      { - 8.20, 2.50,  11.10}
   },
   barbarian = {
      { -39.39, 1.68, -26.25},
      { -38.12, 1.68, -33.06},
      { -35.15, 1.68, -33.18},
      {  45.70, 1.68, -24.35},
      {  45.70, 1.68, -20.50},
      {  45.40, 1.68, - 6.24},
      {  43.12, 1.68, - 2.84},
      {  46.01, 1.68, -27.24}
   }
}